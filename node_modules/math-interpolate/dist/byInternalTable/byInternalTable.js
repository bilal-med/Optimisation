"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.byInternalTable = void 0;
var bilinear_1 = require("../bilinear");
exports.byInternalTable = function (_a) {
    var x = _a.x, y = _a.y, tableAsDoubleArray = _a.tableAsDoubleArray;
    /*
        SHORT DESCRIPTION
  
        tableAsDoubleArray should be made as:
          head_y  | head_x  | head_x  | ..
          head_y  | value   | value   | ..
          head_y  | value   | value   | ..
      */
    try {
        var i1 = void 0;
        var i2 = void 0;
        var j1 = void 0;
        var j2 = void 0;
        for (i2 = 1; tableAsDoubleArray[i2][0] < y; i2++)
            ;
        // eslint-disable-next-line prefer-const
        i1 = i2 - 1;
        for (j2 = 1; tableAsDoubleArray[0][j2] < x; j2++)
            ;
        // eslint-disable-next-line prefer-const
        j1 = j2 - 1;
        // if (!j2) {
        //   i1 -= 1; i2 = i1;
        //   j1 -= 1; j2 = j1;
        // }
        // console.log(tableAsDoubleArray[0][j1], tableAsDoubleArray[i1][0]);
        // console.log(tableAsDoubleArray[0][j2], tableAsDoubleArray[i2][0]);
        return bilinear_1.bilinear({
            x: x,
            y: y,
            x1: tableAsDoubleArray[0][j1],
            y1: tableAsDoubleArray[i1][0],
            x2: tableAsDoubleArray[0][j2],
            y2: tableAsDoubleArray[i2][0],
            q11: tableAsDoubleArray[i1][j1],
            q12: tableAsDoubleArray[i1][j2],
            q21: tableAsDoubleArray[i2][j1],
            q22: tableAsDoubleArray[i2][j2],
        });
    }
    catch (err) {
        return 0.0;
    }
};
